/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package networking.net.gui;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import javax.swing.JOptionPane;
import networking.net.dao.ChatClientDAO;
import networking.net.dao.ChatLogsDAO;
import networking.net.pojo.ChatClient;
import networking.net.pojo.ChatLog;


public class MultiWayServer extends javax.swing.JFrame {

    ServerSocket svc;
    Socket sock;
    FileWriter fw;
    PrintWriter fpw;
    SimpleDateFormat sdf;
    
  ArrayList<String> userNames=new ArrayList<String>();
    ArrayList<PrintWriter> printWriters=new ArrayList<PrintWriter>();
  
   Random rand;
    public MultiWayServer() {
        initComponents();
        rand=new Random();
        try{
        fw=new FileWriter("D:\\chatlogs.txt",true);
        fpw=new PrintWriter(fw,true);
        sdf=new SimpleDateFormat("HH:mm:ss,dd-MMMM-yyyy");
       }
        catch(IOException  ex){
            JOptionPane.showMessageDialog(null,"exception in server"+ex);
            ex.printStackTrace();
            
            }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnStart.setText("START SERVER");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("STOP SERVER");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        jLabel1.setText("MULTI WAY CHAT APPLICATION");

        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStop)
                .addGap(84, 84, 84))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnStop))
                .addGap(84, 84, 84))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        txtChat.setText("server waiting at port no.3385");
        WaitForConnectionThread waitThread=new WaitForConnectionThread();
        waitThread.start();
        btnStart.setEnabled(false);
      //  btnStop.setEnabled(true);

    }//GEN-LAST:event_btnStartActionPerformed
 private void formWindowClosing(java.awt.event.WindowEvent evt) throws IOException
 {                                   
               fw.close();
              JOptionPane.showMessageDialog(null,"chat logs savd successfully");
    }                                  

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        try{
            if(sock==null)
            svc=null;
            else svc.close();
            JOptionPane.showMessageDialog(null,"disconnected successfully from server");
            btnStop.setEnabled(false);
            btnStart.setEnabled(true);
        }
        catch(IOException  ex){
            JOptionPane.showMessageDialog(null,"exception in client"+ex);
            ex.printStackTrace();}

    }//GEN-LAST:event_btnStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultiWayServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultiWayServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultiWayServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultiWayServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultiWayServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChat;
    // End of variables declaration//GEN-END:variables
class WaitForConnectionThread extends Thread{
Socket sock;
public void run(){
    try{
        svc=new ServerSocket(3385);
        while(true)
        {
            sock=svc.accept();
            ChatHandlerThread ch=new ChatHandlerThread(sock);
            ch.start();
            
        }
    }
    catch(IOException  ex){
            JOptionPane.showMessageDialog(null,"exception in server"+ex);
            ex.printStackTrace();
            
            }


}
}
class ChatHandlerThread extends Thread{
Socket sock;
Scanner cl;
PrintWriter pw;
String name;
public  ChatHandlerThread(Socket sock)
{
    this.sock=sock;
}
public void run(){
try{
cl=new Scanner(sock.getInputStream());
pw=new PrintWriter(sock.getOutputStream(),true);
//true se automatic flush ho jayega println call hoen par
int count=0;
while(true){
    try{
     if(count>0)
    { 
        pw.println("NAMEALREADYEXISTS");
        pw.flush();
 }
    else{
        pw.println("NAMEREQUIRED");
        pw.flush();
        }
  name=cl.nextLine();
   
  
  if(!ChatClientDAO.findClient(name))
    {
    userNames.add(name);
    saveClientDetailsToDB();
    
    break;
    }
  
  
  
    
 count++;
}
    catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Exception in server:"+ex);
            ex.printStackTrace();
            return;
        }
}
    pw.println("NAMEACCEPTED"+name);
    pw.flush();
    
    if(userNames.size()==1)
        txtChat.append("CONNECTED CLIENTS:........\n");
    txtChat.append(name + ":from" + sock.getInetAddress() + "\n");
    printWriters.add(pw);
    
    while (true)
        {
         String msg = cl.nextLine();
         System.out.println("Got the message from "+name+":"+msg);
          //txtChat.append(name + ":from" + sock.getInetAddress() + "\n");
                   
                 //   System.out.println("anand");
                  //     printWriters.add(pw);
         if(msg.equalsIgnoreCase("quit")!=false)
         {
             for (PrintWriter writer : printWriters)
         {
                   if(writer.equals(pw)==false)
                   { 
                   writer.println(name+ "has left the room");
                   writer.flush();
                   }
                  
         }
              pw.close();
              sock.close();
              return;
         }
        txtChat.append(name +":"+msg+"\n");
         synchronized (fpw)
         {
        
        
        String timeStamp=sdf.format( new java.util.Date());
        fpw.println(name+":"+msg+"("+timeStamp+")");
        try{
            ChatLog clog= new ChatLog();
            clog.setUsername(name);
            clog.setMsg(msg);
            clog.setMsgtime(timeStamp);
          boolean result= ChatLogsDAO.addChatLog(clog);
            System.out.println("result"+result);
            if(result)
                System.out.println("saved to DB"+clog);
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Exception in server:"+ex);
            ex.printStackTrace();
            return;
        }

  
        
        
        
 }
         for(PrintWriter writer:printWriters)
         { if(writer.equals(pw)==false)
            {
         writer.println(name+":"+msg);
         writer.flush();
         
             }
        }
         
        }

}

catch(IOException ex)
        {
            JOptionPane.showMessageDialog(null, "Exception in server:"+ex);
            ex.printStackTrace();
            return;
        }

  


}

private void saveClientDetailsToDB(){
try{
ChatClient chatClient=new ChatClient();
chatClient.setUsername(name);
chatClient.setPwd(sock.getInetAddress().toString());
boolean result=ChatClientDAO.addClient(chatClient);
if(result)
JOptionPane.showMessageDialog(null,"client details saved successfully","success",JOptionPane.INFORMATION_MESSAGE);
else

JOptionPane.showMessageDialog(null,"client details cant be saved successfully","failure",JOptionPane.ERROR_MESSAGE);





}
catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Exception in  ChatClientDAO:"+ex);
            ex.printStackTrace();
            return;
        }


}
}


}



































